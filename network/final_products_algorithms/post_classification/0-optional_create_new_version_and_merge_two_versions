/* MAPBIOMAS FUEGO - COLECCI√ìN 1 - SCRIPT DE PROCESAMIENTO
 *
 * Script para combinar (fusionar) m√∫ltiples versiones de im√°genes de cicatrices de fuego
 * de regiones y a√±os espec√≠ficos en una nueva versi√≥n consolidada, y exportarlas
 * a una colecci√≥n designada en Google Earth Engine.
 *
 * üìÖ FECHA: 28 de julio de 2025
 *
 * EQUIPO:
 * Grupo de trabajo de mapeo de cicatrices de fuego - MapBiomas Fuego
 * - Instituto de Pesquisa Ambiental da Amaz√¥nia (IPAM)
 * - Wallace Silva y Vera Laisa
 *
 * -------------------------------------------------------------
 * üìå ¬øQU√â HACE ESTE SCRIPT?
 * Este script est√° dise√±ado para facilitar la creaci√≥n de nuevas versiones de datos
 * de cicatrices de fuego mediante la combinaci√≥n de dos o m√°s versiones existentes.
 * Su funcionalidad principal incluye:
 * 1. **Definici√≥n de Ruta Base**: Establece la ruta principal donde se encuentran
 * las colecciones de im√°genes de origen y donde se guardar√°n las nuevas.
 * 2. **Configuraci√≥n de Combinaciones**: Permite definir una lista de objetos,
 * donde cada objeto especifica:
 * - `version_name`: El nombre que tendr√° la nueva imagen combinada (ej., 'v45').
 * - `output_path`: La ruta de la ImageCollection de destino para esta combinaci√≥n.
 * - `assets_toMerge`: Una lista de los IDs completos de las im√°genes fuente
 * que se combinar√°n para crear la nueva versi√≥n.
 * 3. **Fusi√≥n de Im√°genes**: Para cada combinaci√≥n definida:
 * - Inicializa una imagen vac√≠a y luego "pega" las im√°genes de origen una sobre otra.
 * - Utiliza un m√©todo de fusi√≥n que prioriza los valores quemados (`.where(img.gt(0), img)`),
 * asegurando que las √°reas quemadas de todas las versiones se incluyan en la final.
 * 4. **Creaci√≥n de Colecciones de Destino**: Antes de exportar, verifica si la
 * ImageCollection de destino para la imagen combinada existe. Si no existe, la crea.
 * 5. **Exportaci√≥n de Im√°genes Combinadas**: Exporta la imagen resultante de la fusi√≥n
 * a la ImageCollection especificada en Google Earth Engine.
 * 6. **Manejo de Duplicados (Opcional)**: Permite eliminar autom√°ticamente una imagen
 * combinada existente en el destino antes de exportar una nueva versi√≥n con el mismo nombre,
 * evitando conflictos (controlado por `ELIMINA_SI_YA_EXISTE`).
 *
 * -------------------------------------------------------------
 * üîß ¬øQU√â DEBO MODIFICAR PARA USAR ESTE SCRIPT?
 * ‚úÖ **`home`**: Ajusta la variable `home` a la ruta base de tus assets en Earth Engine.
 * ‚úÖ **`images_to_process`**: **Esta es la secci√≥n m√°s importante a modificar.**
 * - Rellena cada objeto en la lista con `version_name`, `output_path`, y la `assets_toMerge`
 * con los IDs de las im√°genes que deseas combinar.
 * - Aseg√∫rate de que las rutas dentro de `assets_toMerge` sean correctas.
 * ‚úÖ **`ELIMINA_SI_YA_EXISTE`**: Cambia esta variable a `true` si deseas que el script
 * elimine autom√°ticamente una imagen combinada existente con el mismo nombre en el destino
 * antes de exportar la nueva. Por defecto est√° en `false` para mayor seguridad.
 * ‚úÖ **`pyramidingPolicy`**: Ajusta la pol√≠tica de piramidaci√≥n en `Export.image.toAsset`
 * si `mode` no es adecuado para tus datos (otras opciones comunes son `mean`, `min`, `max`).
 * ‚úÖ **`scale`**: Confirma que el `scale` (resoluci√≥n) de exportaci√≥n (30 metros por defecto)
 * coincide con la resoluci√≥n original de tus datos para evitar reproyecciones indeseadas.
 *
 * -------------------------------------------------------------
 * ‚ö†Ô∏è RECOMENDACI√ìN IMPORTANTE:
 * Debido a las operaciones de exportaci√≥n y eliminaci√≥n de assets, que requieren
 * confirmaci√≥n manual en la ventana de Tareas de Earth Engine, se recomienda
 * **procesar las combinaciones de forma incremental**. Es decir, comenta o
 * elimina temporalmente las entradas en `images_to_process` que no est√©s
 * trabajando activamente para tener un mejor control.
 * -------------------------------------------------------------
 * üñ±Ô∏è NOTA SOBRE LAS OPERACIONES:
 * Por cada operaci√≥n de exportaci√≥n o eliminaci√≥n, el navegador mostrar√°
 * una ventana emergente (pop-up) pidiendo confirmaci√≥n manual en la pesta√±a
 * "Tasks" (Tareas) de Google Earth Engine. Aseg√∫rate de aceptar o rechazar
 * seg√∫n corresponda para cada asset.
 ***************************************************************/

// --- CONFIGURACI√ìN DE RUTAS Y DATOS ---
// Ruta base donde se encuentran las im√°genes y donde se guardar√°n las nuevas versiones.
var home = 'projects/mapbiomas-peru/assets/FIRE/COLLECTION1/CLASSIFICATION/';

// Variable de configuraci√≥n para controlar la eliminaci√≥n de assets existentes.
// Establece a 'true' para eliminar y reemplazar; 'false' para omitir la exportaci√≥n si ya existe.
var ELIMINA_SI_YA_EXISTE = false; // Valor por defecto: false (seguro)

// --- LISTA DE IM√ÅGENES A PROCESAR Y COMBINAR ---
// Esta lista define cada tarea de combinaci√≥n. Cada objeto representa
// una nueva imagen combinada que se crear√° a partir de las versiones listadas en 'assets_toMerge'.
var images_to_process = [
  {
    version_name:'burned_area_peru_l78_v45_region1_2013',
    output_path: home + 'combined_burned_area_peru_v45', // Nombre de la nueva colecci√≥n para la imagen combinada
    assets_toMerge: [
      home + 'burned_area_peru_v4/burned_area_peru_l78_v4_region1_2013', // Ruta completa de la primera versi√≥n a combinar
      home + 'burned_area_peru_v5/burned_area_peru_l78_v5_region1_2013', // Ruta completa de la segunda versi√≥n a combinar
    ],
  },
  {
    version_name:'burned_area_peru_l78_v45_region1_2014',
    output_path: home + 'combined_burned_area_peru_v45', // Las combinaciones para el mismo "version_name" pueden ir en la misma colecci√≥n de salida
    assets_toMerge: [
      home + 'burned_area_peru_v4/burned_area_peru_l78_v4_region1_2014',
      home + 'burned_area_peru_v5/burned_area_peru_l78_v5_region1_2014',
    ],
  },
  // Agrega m√°s combinaciones aqu√≠ seg√∫n necesites.
  // Cada entrada en esta lista resultar√° en una nueva imagen exportada.
  // {
  //   version_name:'nombre_de_tu_nueva_version',
  //   output_path: home + 'nombre_de_la_coleccion_de_salida',
  //   assets_toMerge: [
  //     home + 'ruta/completa/de/tu/asset_version_A',
  //     home + 'ruta/completa/de/tu/asset_version_B',
  //     // ... puedes a√±adir m√°s assets aqu√≠ para combinar m√∫ltiples versiones
  //   ],
  // },
];


// üöÄ Iterar sobre la lista de objetos para combinar y exportar.
// Para cada objeto en 'images_to_process', se llama a la funci√≥n 'combineAndExportVersions'.
images_to_process.forEach(combineAndExportVersions);


// --- FUNCIONES AUXILIARES ---

// üîÑ Funci√≥n `createAssetIfNotExists(assetId)`
// Verifica si una ImageCollection con el 'assetId' dado ya existe en Earth Engine.
// Si no existe, la crea. Esto es crucial para asegurar que el destino de exportaci√≥n
// est√© listo antes de intentar guardar una imagen.
function createAssetIfNotExists(assetId) {
  try {
    ee.data.getAsset(assetId); // Intenta obtener informaci√≥n del asset.
    print('‚úÖ La colecci√≥n ya existe:', assetId); // Si tiene √©xito, la colecci√≥n existe.
  } catch (e) {
    // Si falla (ej. asset no encontrado), la colecci√≥n no existe, entonces la crea.
    print('üÜï Creando colecci√≥n:', assetId);
    ee.data.createAsset({type:'ImageCollection'}, assetId);
  }
}

// ‚öôÔ∏è Funci√≥n `combineAndExportVersions(obj)`
// Esta funci√≥n principal toma un objeto de 'images_to_process' y realiza
// la l√≥gica de combinaci√≥n y exportaci√≥n para una √∫nica tarea.
function combineAndExportVersions(obj) {
  // Extrae las propiedades del objeto de configuraci√≥n.
  var version_name = obj.version_name; // Nombre de la imagen combinada (ej. 'burned_area_peru_l78_v45_region1_2013')
  var output_path = obj.output_path;   // Ruta de la ImageCollection de destino (ej. '.../combined_burned_area_peru_v45')
  var assets_toMerge = obj.assets_toMerge; // Lista de assets de origen a fusionar.

  // Construye el nombre completo del asset de salida.
  var output_name = output_path + '/' + version_name;

  print('Procesando combinaci√≥n para:', ui.Label(version_name));

  // Asegura que la ImageCollection de destino existe antes de intentar exportar.
  createAssetIfNotExists(output_path);

  // Inicializa una imagen base con un solo pixel y una banda 'b1'.
  // Esto servir√° como lienzo para "pegar" las im√°genes quemadas.
  var image = ee.Image(0).rename('b1');

  // Itera sobre cada asset en la lista 'assets_toMerge'.
  assets_toMerge.forEach(function(asset){
    var img = ee.Image(asset); // Carga la imagen actual de la lista.
    // Combina la imagen actual con la 'image' base.
    // '.where(img.gt(0), img)' significa: donde los p√≠xeles de 'img' sean mayores que 0 (es decir, quemados),
    // usa los valores de 'img'; de lo contrario, mant√©n los valores de 'image'.
    // Esto asegura que cualquier p√≠xel quemado en cualquiera de las versiones se mantenga.
    image = image.where(img.gt(0), img);
  });

  // Obtiene la geometr√≠a y las propiedades de la primera imagen de la lista.
  // Esto es √∫til para establecer la regi√≥n de exportaci√≥n y copiar propiedades importantes.
  var _img = ee.Image(assets_toMerge[0]);
  var _bounds = _img.geometry().bounds(); // Extrae los l√≠mites geogr√°ficos de la imagen.

  // Realiza post-procesamiento en la imagen combinada:
  image = image.selfMask() // Enmascara los p√≠xeles con valor 0 (no quemados), haci√©ndolos transparentes.
    .copyProperties(_img) // Copia las propiedades (ej. sistema de coordenadas, proyecci√≥n) de la imagen original.
    .set({'version':version_name}); // Agrega una nueva propiedad 'version' con el nombre de la versi√≥n combinada.


  // --- L√ìGICA DE EXPORTACI√ìN ---
  try {
    // Intenta verificar si la imagen de salida (la combinaci√≥n) ya existe en el destino.
    ee.data.getAsset(output_name);
    print('‚úÖ Combinaci√≥n ya existe en destino:', output_name);

    // Si la imagen ya existe y 'ELIMINA_SI_YA_EXISTE' es 'true', se elimina y se exporta la nueva.
    if (ELIMINA_SI_YA_EXISTE) {
      print('üóëÔ∏è Eliminando combinaci√≥n existente antes de exportar:', output_name);
      ee.data.deleteAsset(output_name); // Elimina el asset existente.
      print('üì§ Exportando nueva combinaci√≥n:', output_name);
      Export.image.toAsset({ // Inicia la tarea de exportaci√≥n.
        image: image,         // La imagen combinada a exportar.
        description: version_name, // Nombre de la tarea de exportaci√≥n en la pesta√±a 'Tasks'.
        assetId: output_name,    // ID completo del asset de destino.
        pyramidingPolicy: 'mode', // Pol√≠tica de piramidaci√≥n (c√≥mo se agregan los p√≠xeles a diferentes resoluciones). 'mode' es ideal para clasificaciones.
        region: _bounds,         // Regi√≥n geogr√°fica para la exportaci√≥n.
        scale: 30,               // Resoluci√≥n de salida en metros por p√≠xel.
        maxPixels: 1e13,         // L√≠mite de p√≠xeles para evitar errores de memoria en exportaciones grandes.
      });
    } else {
      // Si la imagen existe y 'ELIMINA_SI_YA_EXISTE' es 'false', se omite la exportaci√≥n.
      print('‚è≠Ô∏è Exportaci√≥n de combinaci√≥n omitida (ya existe y no se eliminar√°):', output_name);
    }

  } catch (e) {
    // Si el asset NO existe en el destino (el catch se activa), se exporta directamente.
    print('üì§ Exportando nueva combinaci√≥n (primera vez):', output_name);
    Export.image.toAsset({ // Inicia la tarea de exportaci√≥n.
      image: image,
      description: version_name,
      assetId: output_name,
      pyramidingPolicy: 'mode',
      region: _bounds,
      scale: 30,
      maxPixels: 1e13,
    });
  }
}
